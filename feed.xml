<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Proof Chef</title>
    <description>Mathematics and Computer Science Teaching</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 15 Sep 2016 14:36:54 -0400</pubDate>
    <lastBuildDate>Thu, 15 Sep 2016 14:36:54 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Subsets and Cartesian Products</title>
        <description>&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Computing subsets and Cartesian products&lt;/span&gt;  are common &lt;br /&gt;
tasks you are faced with when trying to solve problems by computer &lt;br /&gt;
programming. And common advice you get is to do these things by &lt;br /&gt;
recursion or, in the case of Cartesian products, by Lisp macros.&lt;br /&gt;
But we don’t want to do them that way.&lt;/p&gt;

&lt;h4 id=&quot;subsets&quot;&gt;1. Subsets&lt;/h4&gt;

&lt;p&gt;A typical Scheme formula for computing subsets uses recursion. But&lt;br /&gt;
suppose you are looking for something among the subsets of a large&lt;br /&gt;
set. What if you have billions of subsets and you want to iterate over&lt;br /&gt;
them one at a time? Well forget the usual recursive solutions. We are&lt;br /&gt;
going to use bit-hacking on integers.&lt;/p&gt;

&lt;p&gt;Every subset of a set can be represented by a binary code. For &lt;br /&gt;
example consider the set &lt;code&gt;{A,B,C,D,E}&lt;/code&gt;. If we set &lt;code&gt;0&lt;/code&gt; to&lt;br /&gt;
mean “don’t choose the element” and &lt;code&gt;1&lt;/code&gt; to mean “choose the&lt;br /&gt;
element”, then the subset &lt;code&gt;{A,C,E}&lt;/code&gt; can be represented&lt;br /&gt;
by the binary code &lt;code&gt;10101&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A B C D E
1`0 1 0 1
---------
A   C   E
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This leads to a good idea! If we take any integer less than &lt;code&gt;2^5&lt;/code&gt;&lt;br /&gt;
and we extract the bits using arithmetic right shift, we can decode&lt;br /&gt;
which elements are chosen for the subset and which are rejected.&lt;br /&gt;
Looping through all such numbers gives us all possible subsets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;(defun subsets (myset)
  (loop for k from 0 below (expt 2 (length myset))
     collecting (loop for s in myset
		   with subset = nil
		   with bitfield = k
		   do (when (= 1 (logand bitfield 1))
			(push s subset))
		     (setf bitfield (ash bitfield -1))
		   finally (return subset))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We test if the last bit is 1 by doing bitwise-&lt;code&gt;and&lt;/code&gt; with 1. Then we &lt;br /&gt;
right-shift to get the next bit, and so on. We know that there will &lt;br /&gt;
be &lt;code&gt;2^n&lt;/code&gt; subsets, so we know when to stop. This way of doing it &lt;br /&gt;
allows some easy modifications. For instance, if you don’t want the &lt;br /&gt;
empty set, just start iterating from &lt;code&gt;k=1&lt;/code&gt; instead of &lt;code&gt;k=0.&lt;/code&gt; What &lt;br /&gt;
could possibly be easier than this? No need for mind-bending &lt;br /&gt;
inefficient recursion. Illustration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&amp;gt; (subsets &#39;(a b c d))
(NIL (A) (B) (B A) (C) (C A) (C B) (C B A) (D) (D A) 
(D B) (D B A) (D C) (D C A) (D C B) (D C B A))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;cartesian-products&quot;&gt;2. Cartesian Products&lt;/h4&gt;

&lt;p&gt;Suppose we have three lists of number &lt;code&gt;(2 3 5)&lt;/code&gt;, &lt;code&gt;(7 11 13)&lt;/code&gt; &lt;br /&gt;
and &lt;code&gt;(17 19 23).&lt;/code&gt; We want to form all possible products obtained by &lt;br /&gt;
choosing one number from each list. No problem, you say, you’ll just &lt;br /&gt;
use nested loops, one loop for each list. But that works only if you &lt;br /&gt;
know you will have exactly three lists of numbers. What if you have &lt;br /&gt;
&lt;code&gt;n&lt;/code&gt; lists of numbers? Then what? Recursion? I’ve seen it done that &lt;br /&gt;
way. Macros? Yes, incredible as it sounds, I’ve seen macros that &lt;br /&gt;
generate &lt;code&gt;n&lt;/code&gt; nested loops to do this job.&lt;/p&gt;

&lt;p&gt;But none of such things are necessary when there exists a perfectly &lt;br /&gt;
good functional programming idiom tailor-made for these kind of &lt;br /&gt;
jobs: &lt;code&gt;reduce&lt;/code&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;(defun cartesian (list-of-lists)
  (reduce #&#39;(lambda (u v)
	      (loop for i in u 
                 nconc (loop for j in v collect (* i j))))
	  list-of-lists))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;lambda&lt;/code&gt; function takes two lists and does a Cartesian product,&lt;br /&gt;
concatenating all the results into one big list. Further Cartesian &lt;br /&gt;
products are accumulated into this list by &lt;code&gt;reduce&lt;/code&gt; as it traverses &lt;br /&gt;
down the &lt;code&gt;list-of-lists.&lt;/code&gt; There, a simple functional way &lt;br /&gt;
of doing it. Illustration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;&amp;gt;(cartesian &#39;((2 3 5) (7 11 13) (17 19 23)))
(238 266 322 374 418 506 442 494 598 357 399 483 561 627 
 759 663 741 897 595 665 805 935 1045 1265 1105 1235 1495)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A example of an application for Cartesian product is to compute &lt;br /&gt;
all the divisors of a number when the prime factorization is known.&lt;/p&gt;

</description>
        <pubDate>Thu, 15 Sep 2016 13:30:00 -0400</pubDate>
        <link>/articles/16/cartesian</link>
        <guid isPermaLink="true">/articles/16/cartesian</guid>
        
        
        <category>lisp,programming,combinatorics</category>
        
      </item>
    
      <item>
        <title>Even and odd sized subsets and more</title>
        <description>&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Consider a set&lt;/span&gt;  of size &lt;code&gt;n&lt;/code&gt;. How many even-sized subsets&lt;br /&gt;
does it have, and how many odd-sized subsets does it have?&lt;br /&gt;
Another way to phrase this question is: how many &lt;code&gt;k&lt;/code&gt;-subsets&lt;br /&gt;
are there when &lt;code&gt;k=0 mod 2&lt;/code&gt;, and how many are there&lt;br /&gt;
when &lt;code&gt;k=1 mod 2&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;One way of computing this is to take the &lt;code&gt;n&lt;/code&gt;th row of&lt;br /&gt;
Pascal’s triangle and add up all the counts for &lt;code&gt;k=0 mod 2&lt;/code&gt;&lt;br /&gt;
and then for &lt;code&gt;k=1 mod 2&lt;/code&gt;. I have written some functions&lt;br /&gt;
that do this in &lt;a href=&quot;https://github.com/tedszy/functional-workout/blob/master/pascal.rkt&quot;&gt;pascal.rkt&lt;/a&gt;. To use this module, you will also&lt;br /&gt;
need &lt;a href=&quot;https://github.com/tedszy/functional-workout/blob/master/grid.rkt&quot;&gt;grid.rkt&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt; (subset-count-congruence-table 2 7)
n         =0     =1  
-----  -----  -----  
0          1      0  
1          1      1  
2          2      2  
3          4      4  
4          8      8  
5         16     16  
6         32     32  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, a set of 6 elements has 32 odd-sized subsets and&lt;br /&gt;
32 even-sized subsets. Let’s abstract away the numbers&lt;br /&gt;
and look at only the patterns.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;n         =0     =1  
-----  -----  -----  
0          1      0
1          =      =  
2          =      =  
3          =      =  
4          =      =  
5          =      =  
6          =      =  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For &lt;code&gt;n &amp;gt; 0&lt;/code&gt; the pattern repeats itself with a period of 1. There&lt;br /&gt;
are always as many even-sized subsets as odd-sized. Since&lt;br /&gt;
the total number of subsets is &lt;code&gt;2^n&lt;/code&gt;, it must be that there&lt;br /&gt;
are &lt;code&gt;2^(n-1)&lt;/code&gt; odd-sized (or even-sized) subsets.&lt;/p&gt;

&lt;p&gt;And now we see why rephrasing the question in terms of modular&lt;br /&gt;
arithmetic is productive. It is immediately natural to ask: what&lt;br /&gt;
about other moduli? What about the number of subsets with size&lt;br /&gt;
divisible by three? And so on. The code in &lt;a href=&quot;https://github.com/tedszy/functional-workout/blob/master/pascal.rkt&quot;&gt;pascal.rkt&lt;/a&gt; handles&lt;br /&gt;
any modulus. Let’s try mod 3.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt; (subset-count-congruence-table 3 13)
n         =0     =1     =2  
-----  -----  -----  -----  
0          1      0      0  
1          1      1      0  
2          1      2      1  
3          2      3      3  
4          5      5      6  
5         11     10     11  
6         22     21     21  
7         43     43     42  
8         85     86     85  
9        170    171    171  
10       341    341    342  
11       683    682    683  
12      1366   1365   1365  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s abstract away the numbers and keep the patterns.&lt;br /&gt;
There are always two entries that are equal. The third&lt;br /&gt;
is either greater by 1 or less by 1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;n         =0     =1     =2  
-----  -----  -----  -----  
0         +1      =      =
1          =      =     -1
2          =     +1      =
3         -1      =      =  
4          =      =     +1  
5          =     -1      =  
6         +1      =      =
7          =      =     -1  
8          =     +1      =  
9         -1      =      =
10         =      =     +1  
11         =     -1      =
12        +1      =      =
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The pattern repeats itself after 6 rows. The period is 6.&lt;br /&gt;
What about other moduli, such as mod 4 or mod 5?&lt;br /&gt;
The code module &lt;a href=&quot;https://github.com/tedszy/functional-workout/blob/master/pascal.rkt&quot;&gt;pascal.rkt&lt;/a&gt; saves us the pain of&lt;br /&gt;
computing the necessary tables. Here is a table for mod 4.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-&amp;gt; (subset-count-congruence-table 4 11)
n         =0     =1     =2     =3  
-----  -----  -----  -----  -----  
0          1      0      0      0  
1          1      1      0      0  
2          1      2      1      0  
3          1      3      3      1  
4          2      4      6      4  
5          6      6     10     10  
6         16     12     16     20  
7         36     28     28     36  
8         72     64     56     64  
9        136    136    120    120  
10       256    272    256    240  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clearly there is a pattern here, but it’s more complicated.&lt;br /&gt;
Does the pattern (whatever it may be) repeat itself? What is&lt;br /&gt;
the period for mod 4? What about mod 5, etc? There is plenty&lt;br /&gt;
of opportunity for you to do some interesting research here!&lt;br /&gt;
Use &lt;a href=&quot;https://github.com/tedszy/functional-workout/blob/master/pascal.rkt&quot;&gt;pascal.rkt&lt;/a&gt; and &lt;a href=&quot;https://github.com/tedszy/functional-workout/blob/master/grid.rkt&quot;&gt;grid.rkt&lt;/a&gt; and be creative!&lt;/p&gt;

</description>
        <pubDate>Sun, 03 Jul 2016 13:30:00 -0400</pubDate>
        <link>/articles/16/pascal-congruences</link>
        <guid isPermaLink="true">/articles/16/pascal-congruences</guid>
        
        
        <category>scheme,programming,combinatorics</category>
        
      </item>
    
      <item>
        <title>Inside-Out: mutual recursion vs. function application</title>
        <description>&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Recursion&lt;/span&gt;  can be imagined as repeated function applications&lt;br /&gt;
turned inside-out. How about mutual recursion? That’s a&lt;br /&gt;
notoriously difficult idea to visualize, but even that can be&lt;br /&gt;
understood the same way. Except that we must use functions&lt;br /&gt;
which return multiple values. That’s the key.&lt;/p&gt;

&lt;p&gt;I go through many examples of this analogy: multiplication of&lt;br /&gt;
complex numbers, Pauli matrices, Fibonacci-like sequences.&lt;br /&gt;
If you have problems understanding mutual recursion (like&lt;br /&gt;
everyone does) then you can work through these examples.&lt;/p&gt;

&lt;p&gt;The article is here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/inside-out.pdf&quot;&gt;Inside-Out (pdf, DRAFT 1)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a rough draft, so there are probably many typos and&lt;br /&gt;
incoherencies. But the material and the ideas are there.&lt;/p&gt;

&lt;p&gt;The code is here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tedszy/inside-out&quot;&gt;inside-out&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 08 Jun 2016 13:30:00 -0400</pubDate>
        <link>/articles/16/inside-out</link>
        <guid isPermaLink="true">/articles/16/inside-out</guid>
        
        
        <category>scheme,programming</category>
        
      </item>
    
      <item>
        <title>Bellman-Ford solver</title>
        <description>&lt;p&gt;The Bellman-Ford algorithm finds the minimum (or maximum) cost paths through a graph. &lt;a href=&quot;https://github.com/tedszy/spst&quot;&gt;Simple Problem Solving Tools&lt;/a&gt; has an implementation of the Bellman-Ford algorithm. Let’s demonstrate it a problem from from cmu.edu. The task is to find the path with the least cost that goes from node &lt;code&gt;0&lt;/code&gt;  to node &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;&lt;img class=&quot;fullwidth&quot; src=&quot;/assets/img/graph2.jpg&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The Bellman-Ford algorithm actually finds the minimum cost path from some source node (in this case node &lt;code&gt;0&lt;/code&gt;) to all other nodes. By adding the key argument &lt;code&gt;:show-steps t&lt;/code&gt; we can make the Bellman-Ford solver output tables of all the intermediate steps, i.e., the distance table and the predecessor table.&lt;/p&gt;

&lt;p&gt;First we use Quicklisp to load The Simple Problem Solving Tools. Clone the spst repo into &lt;code&gt;quicklisp/local-projects&lt;/code&gt; and then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &amp;gt; (ql:quickload :spst)
   &amp;gt; (in-package :spst)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, write a list of nodes and another list of weighted edges corresponding to the edges in the graph. Use these lists to create a graph object. The paths of interest start at &lt;code&gt;0&lt;/code&gt;. That will be the source node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   SPST&amp;gt; (defparameter nodes-cmu &#39;(0 1 2 3 4 6 8 9 12 15))

   SPST&amp;gt; (defparameter edges-cmu
           &#39;((0 8 1) (1 3 12) (1 6 2) (2 1 22) (2 8 8) 
             (2 15 6) (3 2 4) (4 1 3) (6 3 18) (8 3 7) 
             (9 0 11) (9 12 5) (12 9 14) (12 2 16) 
             (15 12 3) (15 1 9) (15 4 5)))

   SPST&amp;gt; (defparameter g-cmu
           (make-graph-with-weighted-edges nodes-cmu 
                                           edges-cmu))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now get the distance and predecessor tables. This is a good way to check if you have been doing it right, and a good way for someone like me to make up more such hand-calculation graph problems for you to do.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  SPST&amp;gt; (bellman-ford g-cmu 0 :show-steps t)
distance table:
    0     1     2     3     4     6     8     9    12    15
    0   NIL   NIL     8   NIL   NIL     1   NIL   NIL   NIL
    0   NIL    12     8   NIL   NIL     1   NIL   NIL   NIL
    0    27    12     8    23   NIL     1   NIL    21    18
    0    26    12     8    23    29     1    35    21    18
    0    26    12     8    23    28     1    35    21    18

predecessor table:
    0     1     2     3     4     6     8     9    12    15
  NIL   NIL   NIL     8   NIL   NIL     0   NIL   NIL   NIL
  NIL   NIL     3     8   NIL   NIL     0   NIL   NIL   NIL
  NIL    15     3     8    15   NIL     0   NIL    15     2
  NIL     4     3     8    15     1     0    12    15     2
  NIL     4     3     8    15     1     0    12    15     2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s nice but what if we want to get the actual path from node &lt;code&gt;0&lt;/code&gt; to node &lt;code&gt;9&lt;/code&gt;? The function &lt;code&gt;optimal-path&lt;/code&gt; decodes this from the information in the hash-table returned by &lt;code&gt;bellman-ford&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   SPST&amp;gt; (optimal-path 9 (bellman-ford g-cmu 0))
   (0 8 3 2 15 12 9)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there we have it. The cost of the best route from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt; is 35, and the route itself goes like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   0 -&amp;gt; 8 -&amp;gt; 3 -&amp;gt; 2 -&amp;gt; 15 -&amp;gt; 12 -&amp;gt; 9.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Bellman-Ford code is here:  &lt;a href=&quot;https://github.com/tedszy/spst/blob/master/graphs.lisp&quot;&gt;graphs.lisp&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 24 Mar 2016 13:30:00 -0400</pubDate>
        <link>/articles/16/bellman</link>
        <guid isPermaLink="true">/articles/16/bellman</guid>
        
        
        <category>lisp,mathematics</category>
        
      </item>
    
      <item>
        <title>Searching the Tree of Pythagorean Tuples</title>
        <description>&lt;p&gt;A primitive pythagorean tuple is a tuple of three integers &lt;code&gt;(a,b,c)&lt;/code&gt; such that &lt;code&gt;(a,b) = (b,c) = (c,a) = 1&lt;/code&gt;, &lt;code&gt;a^2 + b^2 = c^2&lt;/code&gt;, and &lt;code&gt;b&lt;/code&gt; is even.&lt;/p&gt;

&lt;p&gt;Starting with the first primitive tuple, (3,4,5), all others can be generated by applying the Barning matrices &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A = [1 -2 2      B = [1 2 2      C = [-1 2 2 
     2 -1 2           2 1 2           -2 1 2 
     2 -2 3]          2 2 3]          -2 2 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This process generates a ternary tree beginning at the root tuple &lt;code&gt;(3,4,5)&lt;/code&gt;. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(A^4)(B^3)(ABC)^2 * (3,4,5) 
	= (10764945, 55503968, 56538257)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which is in fact a primitive Pythagorean tuple, one of the nodes in the tree. Let’s try this using the &lt;a href=&quot;https://github.com/tedszy/spst&quot;&gt;Simple Problem Solving Tools&lt;/a&gt; package.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-common-lisp&quot;&gt;&amp;gt; (in-package :spst)
SPST&amp;gt; (follow-path &#39;(A A A A B B B A B C A B C))
(32033617, 14757744, 35269585 =&amp;gt; (A A A A B B B A B C A B C))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we could ask the question the other way around. Given a Pythagorean tuple, what is the path that we must take through the tree in order to arrive at it?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;SPST&amp;gt; (depth-search-pytree 
       :search-for #&#39;(lambda (pt) (with-slots (a b c) pt
				    (and (= a 32033617)
					 (= b 14757744)
					 (= c 35269585))))
       :limit (lambda (pt) (with-slots (a b c) pt
			     (&amp;lt;= c 36000000)))
       :with-path t)
((32033617, 14757744, 35269585 =&amp;gt; (A A A A B B B A B C A B C)))
5729606
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The procedute also returned the number of tuples searched: 5,729,606 of them. We can also search without compiling path information, saving lots of memory. Consider the following problem. Suppose &lt;code&gt;(a,b,c)&lt;/code&gt; is a primitive Pythagorean tuple. Is there a larger primitive tuple &lt;code&gt;(e,f,g)&lt;/code&gt; that is elementwise divisible by &lt;code&gt;(a,b,c)&lt;/code&gt;? In other words, does there exist tuples &lt;code&gt;(e,f,g)&lt;/code&gt; such that &lt;code&gt;a|e, b|g, c|g&lt;/code&gt;? Let’s find out. Consider &lt;code&gt;(a,b,c) = (115, 252, 277)&lt;/code&gt;. We will search up to a limit of &lt;code&gt;c &amp;lt;= 10,000,000&lt;/code&gt;, but we will not calculate path information this time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cl&quot;&gt;SPST&amp;gt; (depth-search-pytree 
       :search-for #&#39;(lambda (pt) 
		       (with-slots (a b c) pt
			 (and (= 0 (mod a 115))
			      (= 0 (mod b 252))
			      (= 0 (mod c 277)))))
       :limit #&#39;(lambda (pt) 
		  (with-slots (a b c) pt
		    (&amp;lt;= c 10000000)))
       :with-path nil)
((5253545, 7823592, 9423817) 
 (6998095, 4000752, 8060977)
 (7607825, 2664648, 8060977) 
 (9352375, 1158192, 9423817) 
 (115, 252, 277))
1591579
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After searching almost 1.6 million of them, we found some tuples that meet the criteria! I’m sure you can think of many more such interesting ways to query the tree of Pythagorean tuples. If you want to see the code that does all this, it’s right here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tedszy/spst/blob/master/tuple-trees.lisp&quot;&gt;tuple-trees.lisp&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 19 Mar 2016 13:30:00 -0400</pubDate>
        <link>/articles/16/pytuple</link>
        <guid isPermaLink="true">/articles/16/pytuple</guid>
        
        
        <category>lisp,mathematics</category>
        
      </item>
    
      <item>
        <title>Rational Geometry with Racket</title>
        <description>&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;Points and lines&lt;/span&gt;  can take you a long way&lt;br /&gt;
in geometry. Here is all the material covered in the&lt;br /&gt;
Racket geometry topic, plus more. There are many more&lt;br /&gt;
problems and studies (mostly projective type stuff) and&lt;br /&gt;
the code makes use of some Racket features you might not&lt;br /&gt;
have seen before (match-let).&lt;/p&gt;

&lt;p&gt;The article includes all the code that you need too.&lt;br /&gt;
All you have to do is install Racket and follow along.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/rational-geometry.pdf&quot;&gt;Rational Geometry with Racket (pdf)&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Mar 2016 13:30:00 -0400</pubDate>
        <link>/articles/16/rational-geometry</link>
        <guid isPermaLink="true">/articles/16/rational-geometry</guid>
        
        
        <category>mathematics</category>
        
      </item>
    
      <item>
        <title>The Amir Problem</title>
        <description>&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;The Amir problem&lt;/span&gt;  was proposed to me a long time ago by an &lt;br /&gt;
engineering student named Amir. Suppose you have a lottery based &lt;br /&gt;
on drawing 6 numbers from a set of 49 numbers. How many such &lt;br /&gt;
combinations do you need in order to guarantee that the outcome &lt;br /&gt;
will always score at least 3 numbers out of the winning draw of 6?&lt;/p&gt;

&lt;p&gt;Here is a brute-force solution. Generate all 13,983,816 &lt;br /&gt;
combinations of 6 objects chosen from a set of 49. Go through &lt;br /&gt;
them one at time. Add a combination to the solution set if it &lt;br /&gt;
does not have more that two objects in common with any other &lt;br /&gt;
combination in the solution set. If you do this you’re likely&lt;br /&gt;
to get a solution set with about 450 combinations.&lt;/p&gt;

&lt;p&gt;The interesting thing about this problem is that the size of&lt;br /&gt;
the solution set (we can call it the Amir set) depends on the&lt;br /&gt;
order in which you examine and add the combinations. If you&lt;br /&gt;
shuffle the vector of 13.9 million combinations and then build&lt;br /&gt;
an Amir set, you can get, say, 400 elements or 550 elements for&lt;br /&gt;
example. What is the smallest possible Amir set? What is the &lt;br /&gt;
largest possible Amir set? I don’t know yet.&lt;/p&gt;

&lt;p&gt;For a long time, the smallest Amir set I found was around 360&lt;br /&gt;
combinations. But recently, by means of a new trick, I happend&lt;br /&gt;
to find one that is only 241 combinations. How low can it go?&lt;/p&gt;

&lt;p&gt;To do experiments with Amir sets, we need some fast code, &lt;br /&gt;
so this calls for C++. Combinations are represented by &lt;br /&gt;
the first 49 bits of 64-bit integers with popcount 6. They &lt;br /&gt;
are compared using Kernighan’s popcount algorithm, which for &lt;br /&gt;
this particular application is the fastest way I have yet found. &lt;br /&gt;
The original Amir program was written in Matlab and it took &lt;br /&gt;
something like ten days (!) to finish on an old Intel Pentium. &lt;br /&gt;
But today, with C++ and bit-hacking, a typical Amir set can be &lt;br /&gt;
computed on average hardware in about 1 second.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tedszy/more-fun-to-compute/tree/master/amir&quot;&gt;Amir code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can play with the order in which the combinations are &lt;br /&gt;
evaluated, and with the way that the Amir set is seeded. &lt;br /&gt;
Try to find an Amir set smaller than 241 elements. Let me &lt;br /&gt;
know if you do.&lt;/p&gt;

&lt;p&gt;The Amir project has some Common Lisp code for generating a &lt;br /&gt;
latex/tikz graphic representing an Amir set. Each element of &lt;br /&gt;
an Amir set is a popcount 6 number in a 49-bit field, so each &lt;br /&gt;
one can be represented as a path through a lattice: 1 is up &lt;br /&gt;
and 0 is to the right. Below is the visualization of the 241 &lt;br /&gt;
element Amir set.&lt;/p&gt;

&lt;div&gt;&lt;img class=&quot;fullwidth&quot; src=&quot;assets/img/amir-241.png&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;/span&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 14 Feb 2016 13:30:00 -0500</pubDate>
        <link>/articles/16/amir</link>
        <guid isPermaLink="true">/articles/16/amir</guid>
        
        
        <category>mathematics</category>
        
      </item>
    
      <item>
        <title>What are Quaternions?</title>
        <description>&lt;p&gt;A concise definition goes like this: a quaternion &lt;code&gt;q&lt;/code&gt; is a linear combination&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;q = w + xi + yj + zk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;ij = k&lt;/code&gt;, &lt;code&gt;jk = i&lt;/code&gt;, &lt;code&gt;ki = j&lt;/code&gt; and  &lt;code&gt;ijk = -1&lt;/code&gt;. But perhaps this doesn’t give us much of a feeling about what quaternions are supposed to be. Is there a way of understanding them without resorting to the imaginaries &lt;code&gt;i, j, k&lt;/code&gt;? In fact Hamilton himself preferred to avoid  &lt;code&gt;i, j, k&lt;/code&gt; as much as possibe when talking about quaternions. This article presents a particular way of introducing the quaternion idea without &lt;code&gt;i, j, k&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/quaternion.pdf&quot;&gt;Thinking about Quaternions (pdf)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The article also addresses the peculiar question: can you add a number to a vector, and if so, what do you get?&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Jan 2016 13:30:00 -0500</pubDate>
        <link>/articles/16/quaternion</link>
        <guid isPermaLink="true">/articles/16/quaternion</guid>
        
        
        <category>mathematics</category>
        
      </item>
    
      <item>
        <title>The Proof Chef: fine mathematical cuisine</title>
        <description>&lt;p&gt;&lt;span class=&quot;newthought&quot;&gt;290 PROOFS AND EXERCISES SO FAR !&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Here it is: &lt;a href=&quot;/assets/proof-chef.pdf&quot;&gt;The Proof Chef (pdf)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;New: a section on periodic functions!&lt;/p&gt;

&lt;p&gt;We have a lengthy section on induction!&lt;/p&gt;

&lt;p&gt;And we are starting a chapter on combinatorics!&lt;/p&gt;

&lt;p&gt;It’s a book in progress, but there’s already enough material&lt;br /&gt;
to keep you busy for a while. Work through all the proofs. &lt;br /&gt;
Try to do the ones I haven’t done yet. If you have suggestions &lt;br /&gt;
for proofs that should be included, let me know.&lt;/p&gt;

</description>
        <pubDate>Sat, 21 Nov 2015 08:06:04 -0500</pubDate>
        <link>/articles/15/welcome</link>
        <guid isPermaLink="true">/articles/15/welcome</guid>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Generalized Euclidean Algorithm</title>
        <description>&lt;p&gt;With the Euclidean algorithm, you can compute GCDs and&lt;br /&gt;
continued fractions. But with the generalized Euclidean&lt;br /&gt;
algorithm you can also change radix and compute integer&lt;br /&gt;
square roots, among other things. Watch how this is done. &lt;br /&gt;
This module includes the Fermat factorization code I used &lt;br /&gt;
to design test questions and class problems. Now you can &lt;br /&gt;
use it too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tedszy/functional-workout/blob/master/gen-euclidean.rkt&quot;&gt;gen-euclidean.rkt&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Nov 2015 21:30:00 -0500</pubDate>
        <link>/articles/15/euclidean</link>
        <guid isPermaLink="true">/articles/15/euclidean</guid>
        
        
        <category>racket</category>
        
      </item>
    
  </channel>
</rss>
